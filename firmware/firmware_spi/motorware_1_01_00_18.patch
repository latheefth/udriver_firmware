diff --git a/motorware/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c b/motorware/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c
index 9b1d5fd..cbdb9a6 100755
--- a/motorware/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c
+++ b/motorware/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c
@@ -99,6 +99,10 @@ void DRV8305_enable(DRV8305_Handle handle)
   {
       if (++enableWaitTimeOut > 999)
       {
+          // ***** JF edit starts
+          //GPIO_setHigh(obj->gpioHandle,GPIO_Number_34);
+          // ***** JF edit ends
+
           obj->enableTimeOut = true;
       }
   }
@@ -1106,6 +1110,14 @@ uint16_t DRV8305_readSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr)
   SPI_resetRxFifo(obj->spiHandle);
   SPI_enableRxFifo(obj->spiHandle);
 
+  // ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
   // write the command
   SPI_write(obj->spiHandle,ctrlWord);
 
@@ -1122,6 +1134,14 @@ uint16_t DRV8305_readSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr)
   // Read the word
   readWord = SPI_readEmu(obj->spiHandle);
 
+  // ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
   return(readWord & DRV8305_DATA_MASK);
 } // end of DRV8305_readSpi() function
 
@@ -1135,6 +1155,14 @@ void DRV8305_writeSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr,cons
   // build the control word
   ctrlWord = (uint16_t)DRV8305_buildCtrlWord(CtrlMode_Write,regAddr,data);
 
+// ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
   // reset the Rx fifo pointer to zero
   SPI_resetRxFifo(obj->spiHandle);
   SPI_enableRxFifo(obj->spiHandle);
@@ -1146,6 +1174,14 @@ void DRV8305_writeSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr,cons
   for(n=0;n<0xf;n++)
     asm(" NOP");
 
+  // ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
   return;
 }  // end of DRV8305_writeSpi() function
 
diff --git a/motorware/sw/modules/enc/src/32b/enc.c b/motorware/sw/modules/enc/src/32b/enc.c
index 10a45ea..cb8b6dc 100755
--- a/motorware/sw/modules/enc/src/32b/enc.c
+++ b/motorware/sw/modules/enc/src/32b/enc.c
@@ -65,7 +65,7 @@ ENC_Handle ENC_init(void *pMemory,const size_t numBytes)
   return(encHandle);
 } // end of ENC_init() function
 
-void ENC_setup(ENC_Handle encHandle, const int16_t sample_period, const uint16_t num_pole_pairs, const uint16_t num_enc_slots, const uint32_t enc_zero_offset, const float_t full_scale_freq, const float_t speed_update_freq, const float_t speed_cutoff)
+void ENC_setup(ENC_Handle encHandle, const int16_t sample_period, const uint16_t num_pole_pairs, const uint32_t num_enc_slots, const uint32_t enc_zero_offset, const float_t full_scale_freq, const float_t speed_update_freq, const float_t speed_cutoff)
 {
   ENC_Obj *enc;
   float_t temp;
diff --git a/motorware/sw/modules/enc/src/32b/enc.h b/motorware/sw/modules/enc/src/32b/enc.h
index 284ae02..a6b7919 100755
--- a/motorware/sw/modules/enc/src/32b/enc.h
+++ b/motorware/sw/modules/enc/src/32b/enc.h
@@ -33,8 +33,8 @@
 #define _ENC_H_
 
 //! \file   modules/enc/src/32b/enc.h
-//! \brief  Contains the public interface to the 
-//!         encoder module routines 
+//! \brief  Contains the public interface to the
+//!         encoder module routines
 //!
 //! (C) Copyright 2011, Texas Instruments, Inc.
 
@@ -88,7 +88,7 @@ typedef struct _ENC_Obj_
   int16_t sample_count;			//!< when it reaches the sample period, collect & process encoder data
   int16_t sample_period;		//!< sample period of encoder processing
   uint16_t num_pole_pairs;		//!< number of pole pairs in motor
-  uint16_t num_enc_slots;		//!< number of encoder slots
+  uint32_t num_enc_slots;		//!< number of encoder slots
   _iq mech_angle_gain;			//!< gain which converts the encoder counts to Q24 mechanical degrees
   uint32_t enc_zero_offset;     //!< encoder zero offset in counts
   int32_t enc_elec_angle;		//!< encoder current electrical angle
@@ -230,8 +230,8 @@ inline void ENC_setZeroOffset(ENC_Handle encHandle, uint32_t zeroOffset) {
 //! \param[in] speed_update_freq                Update frequency in Hz for speed calculation
 //! \param[in] speed_cutoff                     Speed calculation LPF cutoff frequency in Hz
 extern void ENC_setup(ENC_Handle encHandle, const int16_t sample_period,
-                      const uint16_t num_pole_pairs, const uint16_t num_enc_slots, 
-                      const uint32_t enc_zero_offset, const float_t full_scale_freq, 
+                      const uint16_t num_pole_pairs, const uint32_t num_enc_slots,
+                      const uint32_t enc_zero_offset, const float_t full_scale_freq,
                       const float_t speed_update_freq, const float_t speed_cutoff);
 
 #ifdef __cplusplus
diff --git a/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c b/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c
index 1f50131..4ebfa8b 100755
--- a/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c
+++ b/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c
@@ -30,7 +30,7 @@
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  * --/COPYRIGHT--*/
 //! \file   solutions/instaspin_foc/boards/boostxldrv8305_revA/f28x/f2806xF/src/hal.c
-//! \brief Contains the various functions related to the HAL object (everything outside the CTRL system) 
+//! \brief Contains the various functions related to the HAL object (everything outside the CTRL system)
 //!
 //! (C) Copyright 2011, Texas Instruments, Inc.
 
@@ -79,7 +79,7 @@ void HAL_cal(HAL_Handle handle)
   // Run the Device_cal() function
   // This function copies the ADC and oscillator calibration values from TI reserved
   // OTP into the appropriate trim registers
-  // This boot ROM automatically calls this function to calibrate the interal 
+  // This boot ROM automatically calls this function to calibrate the interal
   // oscillators and ADC with device specific calibration data.
   // If the boot ROM is bypassed by Code Composer Studio during the development process,
   // then the calibration must be initialized by the application
@@ -838,7 +838,11 @@ void HAL_setParamsMtr(HAL_Handle_mtr handleMtr,HAL_Handle handle,const USER_Para
   else if(objMtr->mtrNum == HAL_MTR2)
   {
     DRV8305_setGpioHandle(objMtr->drv8305Handle,obj->gpioHandle);
-    DRV8305_setSpiHandle(objMtr->drv8305Handle,obj->spiBHandle);
+
+    // ***** JF edit starts
+    //DRV8305_setSpiHandle(objMtr->drv8305Handle,obj->spiBHandle);
+    DRV8305_setSpiHandle(objMtr->drv8305Handle,obj->spiAHandle);
+    // ***** JF edit ends
     DRV8305_setGpioNumber(objMtr->drv8305Handle,GPIO_Number_52);
   }
 
@@ -888,7 +892,7 @@ void HAL_setupAdcs(HAL_Handle handle)
   ADC_enableBandGap(obj->adcHandle);
 
 
-  // set the ADC voltage reference source to internal 
+  // set the ADC voltage reference source to internal
   ADC_setVoltRefSrc(obj->adcHandle,ADC_VoltageRefSrc_Int);
 
 
@@ -923,19 +927,46 @@ void HAL_setupAdcs(HAL_Handle handle)
 
   ADC_disableInt(obj->adcHandle,ADC_IntNumber_2);
   ADC_setIntMode(obj->adcHandle,ADC_IntNumber_2,ADC_IntMode_ClearFlag);
-  ADC_setIntSrc(obj->adcHandle,ADC_IntNumber_2,ADC_IntSrc_EOC14);
+  ADC_setIntSrc(obj->adcHandle,ADC_IntNumber_2,ADC_IntSrc_EOC15);
 
 
 
   //configure the SOCs for boostxldrv8305_revB on J1 Connection
+
+  // About ADC Initial Conversion bug
+  // --------------------------------
+  //
+  // From the Silicon Errata of the TMS320F28069 (SPRZ342K):
+  // "When the ADC conversions are initiated by any source of trigger in either
+  // sequential or simultaneous sampling mode, the first sample may not be the
+  // correct conversion result."
+  //
+  // The proposed workaround is to sample the first channel twice and only use
+  // the second result (i.e. never look at the result of the first conversion).
+  // This, however, wastes one of the SOC numbers, i.e. using all 16 ADC
+  // channels gets difficult.
+  // The expected error for the first sample, according to the errata, is <= 4
+  // LSB (least significant bits).  On the range of -1 to +1, this corresponds
+  // to an error of <= 0.002.
+  // For many possible applications of the remaining ADCs A6 and B6 (e.g.
+  // hardware slider, temparature sensor, ...) this error is small enough to be
+  // tolerable.  Therefore we simply use the first (erroneous) conversion of the
+  // two sequences for these inputs and use them, despite being not 100%
+  // correct.  By doing so, we avoid errors in the critical phase current
+  // conversions while still being able to use all 16 channels without ugly
+  // hacks.
+
+
   // Begin Motor 1 sampling
-  // EXT IA-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_0,ADC_SocChanNumber_A0);
+
+  // Sensor on ADCINA6 (e.g. potentiometer).
+  // Note: this is affected by ADC Initial Conversion bug (SPRZ342) which leads
+  // to an error of typically <= 0.002
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_0,ADC_SocChanNumber_A6);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_0,ADC_SocTrigSrc_EPWM1_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_0,ADC_SocSampleDelay_9_cycles);
 
   // EXT IA-FB
-  // Duplicate conversion due to ADC Initial Conversion bug (SPRZ342)
   ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_1,ADC_SocChanNumber_A0);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_1,ADC_SocTrigSrc_EPWM1_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_1,ADC_SocSampleDelay_9_cycles);
@@ -972,43 +1003,52 @@ void HAL_setupAdcs(HAL_Handle handle)
   // End Motor 1 sampling
 
   // Begin Motor 2 sampling
-  // EXT IA-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_8,ADC_SocChanNumber_A3);
+
+  // Sensor on ADCINB6 (e.g. potentiometer).
+  // Note: this is affected by ADC Initial Conversion bug (SPRZ342) which leads
+  // to an error of typically <= 0.002
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_8,ADC_SocChanNumber_B6);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_8,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_8,ADC_SocSampleDelay_9_cycles);
 
-  // EXT IB-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_9,ADC_SocChanNumber_B3);
+  // EXT IA-FB
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_9,ADC_SocChanNumber_A3);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_9,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_9,ADC_SocSampleDelay_9_cycles);
 
-  // EXT IC-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_10,ADC_SocChanNumber_A4);
+  // EXT IB-FB
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_10,ADC_SocChanNumber_B3);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_10,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_10,ADC_SocSampleDelay_9_cycles);
 
-  // ADC-Vhb1
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_11,ADC_SocChanNumber_B7);
+  // EXT IC-FB
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_11,ADC_SocChanNumber_A4);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_11,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_11,ADC_SocSampleDelay_9_cycles);
 
-  // ADC-Vhb2
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_12,ADC_SocChanNumber_B4);
+  // ADC-Vhb1
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_12,ADC_SocChanNumber_B7);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_12,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_12,ADC_SocSampleDelay_9_cycles);
 
-  // ADC-Vhb3
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_13,ADC_SocChanNumber_A5);
+  // ADC-Vhb2
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_13,ADC_SocChanNumber_B4);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_13,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_13,ADC_SocSampleDelay_9_cycles);
 
-  // VDCBUS
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_14,ADC_SocChanNumber_B5);
+  // ADC-Vhb3
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_14,ADC_SocChanNumber_A5);
   ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_14,ADC_SocTrigSrc_EPWM4_ADCSOCA);
   ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_14,ADC_SocSampleDelay_9_cycles);
+
+  // VDCBUS
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_15,ADC_SocChanNumber_B5);
+  ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_15,ADC_SocTrigSrc_EPWM4_ADCSOCA);
+  ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_15,ADC_SocSampleDelay_9_cycles);
   // End Motor 2 sampling
 
 
+
   return;
 } // end of HAL_setupAdcs() function
 
@@ -1069,7 +1109,7 @@ void HAL_setupGate(HAL_Handle_mtr handleMtr,SPI_Handle handleSpi,GPIO_Handle han
 //  HAL_Obj *obj = (HAL_Obj *)handle;
   HAL_Obj_mtr *objMtr = (HAL_Obj_mtr *)handleMtr;
 
-  
+
   DRV8305_setGpioHandle(objMtr->drv8305Handle,handleGpio);
   DRV8305_setSpiHandle(objMtr->drv8305Handle,handleSpi);
   DRV8305_setGpioNumber(objMtr->drv8305Handle,gpio);
@@ -1120,15 +1160,24 @@ void HAL_setupGpios(HAL_Handle handle)
   GPIO_setMode(obj->gpioHandle,GPIO_Number_11,GPIO_11_Mode_EPWM6B);
 
   // GPIO
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_12,GPIO_12_Mode_GeneralPurpose);
-  GPIO_setLow(obj->gpioHandle,GPIO_Number_12);
-  GPIO_setDirection(obj->gpioHandle,GPIO_Number_12,GPIO_Direction_Output);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_12,GPIO_12_Mode_GeneralPurpose);
+//  GPIO_setLow(obj->gpioHandle,GPIO_Number_12);
+//  GPIO_setDirection(obj->gpioHandle,GPIO_Number_12,GPIO_Direction_Output);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_12,GPIO_12_Mode_SPISIMOB);
+  // ***** JF edit ends
 
   // GPIO
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_13,GPIO_13_Mode_GeneralPurpose);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_13,GPIO_13_Mode_GeneralPurpose);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_13,GPIO_13_Mode_SPISOMIB);
+  // ***** JF edit ends
 
   // SPIB CLK
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_14,GPIO_14_Mode_SPICLKB);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_14,GPIO_14_Mode_SPICLKB);
+    GPIO_setMode(obj->gpioHandle,GPIO_Number_14,GPIO_14_Mode_GeneralPurpose);
+  // ***** JF edit ends
 
   // UARTB RX
   GPIO_setMode(obj->gpioHandle,GPIO_Number_15,GPIO_15_Mode_SCIRXDB);
@@ -1146,8 +1195,13 @@ void HAL_setupGpios(HAL_Handle handle)
   GPIO_setMode(obj->gpioHandle,GPIO_Number_18,GPIO_18_Mode_SPICLKA);
 
   // SPIA CS
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_19,GPIO_19_Mode_SPISTEA_NOT);
-  
+  // ***** JF edit starts
+  //  GPIO_setMode(obj->gpioHandle,GPIO_Number_19,GPIO_19_Mode_SPISTEA_NOT);
+  GPIO_setMode(obj->gpioHandle, GPIO_Number_19, GPIO_19_Mode_GeneralPurpose);
+  GPIO_setHigh(obj->gpioHandle, GPIO_Number_19);
+  GPIO_setDirection(obj->gpioHandle, GPIO_Number_19, GPIO_Direction_Output);
+  // ***** JF edit ends
+
 #ifdef QEP
   // EQEP1A
   GPIO_setMode(obj->gpioHandle,GPIO_Number_20,GPIO_20_Mode_EQEP1A);
@@ -1179,23 +1233,53 @@ void HAL_setupGpios(HAL_Handle handle)
   GPIO_setMode(obj->gpioHandle,GPIO_Number_23,GPIO_23_Mode_GeneralPurpose);
 #endif
 
+  // ***** JF edit starts
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_22,GPIO_22_Mode_GeneralPurpose); // redundant, but okay
+  GPIO_setLow(obj->gpioHandle,GPIO_Number_22);
+  GPIO_setDirection(obj->gpioHandle,GPIO_Number_22,GPIO_Direction_Input);
+  GPIO_setExtInt(obj->gpioHandle, GPIO_Number_22, CPU_ExtIntNumber_3);
+
+  // ***** JF edit ends
+
   // SPIB SIMO
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_24,GPIO_24_Mode_SPISIMOB);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_24,GPIO_24_Mode_SPISIMOB);
+    GPIO_setMode(obj->gpioHandle,GPIO_Number_24,GPIO_24_Mode_GeneralPurpose);
+  // ***** JF edit ends
 
   // SPIB SOMI
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_25,GPIO_25_Mode_SPISOMIB);
+  // **** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_25,GPIO_25_Mode_SPISOMIB);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_25,GPIO_25_Mode_GeneralPurpose);
+  // **** JF edit ends
+
+  // GPIO -- Input for button
+  // **** JF edit starts
+//  GPIO_setMode(obj->gpioHandle, GPIO_Number_26, GPIO_26_Mode_GeneralPurpose);
+//  GPIO_setHigh(obj->gpioHandle, GPIO_Number_26);
+//  GPIO_setDirection(obj->gpioHandle, GPIO_Number_26, GPIO_Direction_Input);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_26,GPIO_26_Mode_SPICLKB);
 
-  // GPIO
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_26,GPIO_26_Mode_GeneralPurpose);
 
   // SPIB CS
+
+  // ***** JF edit starts
   GPIO_setMode(obj->gpioHandle,GPIO_Number_27,GPIO_27_Mode_SPISTEB_NOT);
+  GPIO_setDirection(obj->gpioHandle, GPIO_Number_27, GPIO_Direction_Input); // BTW, this is necessary!
+
+  GPIO_setMode(obj->gpioHandle, GPIO_Number_29, GPIO_29_Mode_GeneralPurpose);
+  GPIO_setHigh(obj->gpioHandle, GPIO_Number_29);
+  GPIO_setDirection(obj->gpioHandle, GPIO_Number_29, GPIO_Direction_Output);
+  // ***** JF edit ends
 
   // OCTWn
   GPIO_setMode(obj->gpioHandle,GPIO_Number_28,GPIO_28_Mode_TZ2_NOT);
 
   // FAULTn
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_29,GPIO_29_Mode_TZ3_NOT);
+
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_29,GPIO_29_Mode_TZ3_NOT);
+  // ***** JF edit ends
 
   // CAN RX
   GPIO_setMode(obj->gpioHandle,GPIO_Number_30,GPIO_30_Mode_CANRXA);
@@ -1207,7 +1291,14 @@ void HAL_setupGpios(HAL_Handle handle)
   GPIO_setMode(obj->gpioHandle,GPIO_Number_32,GPIO_32_Mode_SDAA);
 
   // I2C Clock
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_33,GPIO_33_Mode_SCLA);
+  // ***** JF edit
+
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_33,GPIO_33_Mode_SCLA);
+    GPIO_setMode(obj->gpioHandle,GPIO_Number_33,GPIO_33_Mode_GeneralPurpose);
+    GPIO_setLow(obj->gpioHandle,GPIO_Number_33);
+    GPIO_setDirection(obj->gpioHandle,GPIO_Number_33,GPIO_Direction_Output);
+
+  // ***** JF edit ends
 
   // LED D9
   GPIO_setMode(obj->gpioHandle,GPIO_Number_34,GPIO_34_Mode_GeneralPurpose);
@@ -1262,10 +1353,10 @@ void HAL_setupGpios(HAL_Handle handle)
   GPIO_setMode(obj->gpioHandle,GPIO_Number_53,GPIO_53_Mode_GeneralPurpose);
   GPIO_setLow(obj->gpioHandle,GPIO_Number_53);
   GPIO_setDirection(obj->gpioHandle,GPIO_Number_53,GPIO_Direction_Output);
-  
+
   // Set Qualification Period for GPIO56-58, 22*2*(1/90MHz) = 0.48us
   GPIO_setQualificationPeriod(obj->gpioHandle,GPIO_Number_56,22);
-  
+
 #ifdef QEP
   // EQEP2A
   GPIO_setMode(obj->gpioHandle,GPIO_Number_54,GPIO_54_Mode_EQEP2A);
@@ -1362,7 +1453,7 @@ void HAL_setupPeripheralClks(HAL_Handle handle)
 
   CLK_enableSpiaClock(obj->clkHandle);
   CLK_enableSpibClock(obj->clkHandle);
-  
+
   CLK_enableTbClockSync(obj->clkHandle);
 
   return;
@@ -1514,7 +1605,7 @@ void HAL_setupPwms(HAL_Handle_mtr handleMtr,HAL_Handle handle,const USER_Params
   // first step to synchronize the pwms
   CLK_disableTbClockSync(obj->clkHandle);
 
-  // since the PWM is configured as an up/down counter, the period register is set to one-half 
+  // since the PWM is configured as an up/down counter, the period register is set to one-half
   // of the desired PWM period
   PWM_setPeriod(objMtr->pwmHandle[PWM_Number_1],halfPeriod_cycles);
   PWM_setPeriod(objMtr->pwmHandle[PWM_Number_2],halfPeriod_cycles);
@@ -1610,15 +1701,27 @@ void HAL_setupSpiB(HAL_Handle handle)
   HAL_Obj   *obj = (HAL_Obj *)handle;
 
   SPI_reset(obj->spiBHandle);
-  SPI_setMode(obj->spiBHandle,SPI_Mode_Master);
-  SPI_setClkPolarity(obj->spiBHandle,SPI_ClkPolarity_OutputRisingEdge_InputFallingEdge);
+  SPI_setMode(obj->spiBHandle,SPI_Mode_Slave); // this is default, but we shall set it anyway
+  SPI_setClkPolarity(obj->spiBHandle,SPI_ClkPolarity_OutputFallingEdge_InputRisingEdge);
+  SPI_setCharLength(obj->spiBHandle,SPI_CharLength_16_Bits);
+
+  SPI_enableRxFifo(obj->spiBHandle);
+  SPI_enableInt(obj->spiBHandle);
+
   SPI_enableTx(obj->spiBHandle);
   SPI_enableTxFifoEnh(obj->spiBHandle);
   SPI_enableTxFifo(obj->spiBHandle);
-  SPI_setTxDelay(obj->spiBHandle,0x0018);
-  SPI_setBaudRate(obj->spiBHandle,(SPI_BaudRate_e)(0x000d));
-  SPI_setCharLength(obj->spiBHandle,SPI_CharLength_16_Bits);
-  SPI_setSuspend(obj->spiBHandle,SPI_TxSuspend_free);
+  SPI_setTxDelay(obj->spiBHandle,0x00AF);
+
+  (obj->spiBHandle)->SPIFFTX |= (1<<15);
+
+
+  SPI_enableRxFifoInt(obj->spiBHandle); // SPIINT/SPIRXINT: common interrupt for FIFO receive, receive error, and FIFO overflow
+  (obj->spiBHandle)->SPIFFRX &= (~0x001F); // clear bits 4-0 (RXFFIL4-0)
+
+  (obj->spiBHandle)->SPIFFRX |= 2;          // set to generate RXFFINT when the FIFO has N words
+
+  //SPI_setSuspend(obj->spiBHandle,SPI_TxSuspend_free);
   SPI_enable(obj->spiBHandle);
 
   return;
@@ -1660,13 +1763,13 @@ void HAL_setupPwmDacs(HAL_Handle handle)
       PWMDAC_setShadowMode_CmpA(obj->pwmDacHandle[cnt],PWM_ShadowMode_Shadow);
       PWMDAC_setShadowMode_CmpB(obj->pwmDacHandle[cnt],PWM_ShadowMode_Shadow);
 
-      // Initialize the Action-Qualifier Output A Register (AQCTLA) 
+      // Initialize the Action-Qualifier Output A Register (AQCTLA)
       PWMDAC_setActionQual_CntUp_CmpA_PwmA(obj->pwmDacHandle[cnt],PWM_ActionQual_Clear);
       PWMDAC_setActionQual_CntDown_CmpA_PwmA(obj->pwmDacHandle[cnt],PWM_ActionQual_Set);
       PWMDAC_setActionQual_CntUp_CmpB_PwmB(obj->pwmDacHandle[cnt],PWM_ActionQual_Clear);
       PWMDAC_setActionQual_CntDown_CmpB_PwmB(obj->pwmDacHandle[cnt],PWM_ActionQual_Set);
 
-      // Initialize the Dead-Band Control Register (DBCTL) 
+      // Initialize the Dead-Band Control Register (DBCTL)
       PWMDAC_disableDeadBand(obj->pwmDacHandle[cnt]);
 
       // Initialize the PWM-Chopper Control Register (PCCTL)
@@ -1683,7 +1786,7 @@ void HAL_setupPwmDacs(HAL_Handle handle)
       PWMDAC_setTripZoneState_DCBEVT1(obj->pwmDacHandle[cnt],PWM_TripZoneState_HighImp);
     }
 
-  // since the PWM is configured as an up/down counter, the period register is set to one-half 
+  // since the PWM is configured as an up/down counter, the period register is set to one-half
   // of the desired PWM period
   PWMDAC_setPeriod(obj->pwmDacHandle[PWMDAC_Number_1],halfPeriod_cycles);
   PWMDAC_setPeriod(obj->pwmDacHandle[PWMDAC_Number_2],halfPeriod_cycles);
@@ -1718,7 +1821,7 @@ void HAL_writeDrvData(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars)
   HAL_Obj_mtr  *obj = (HAL_Obj_mtr *)handle;
 
   DRV8305_writeData(obj->drv8305Handle,Spi_8305_Vars);
-  
+
   return;
 }  // end of HAL_writeDrvData() function
 
@@ -1728,7 +1831,7 @@ void HAL_readDrvData(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars)
   HAL_Obj_mtr  *obj = (HAL_Obj_mtr *)handle;
 
   DRV8305_readData(obj->drv8305Handle,Spi_8305_Vars);
-  
+
   return;
 }  // end of HAL_readDrvData() function
 
diff --git a/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h b/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h
index c463a3b..8e131dd 100755
--- a/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h
+++ b/motorware/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h
@@ -120,12 +120,12 @@ extern "C" {
 
 //! \brief Defines the function to turn LEDs off
 //!
-#define HAL_turnLedOff            HAL_setGpioLow
+#define HAL_turnLedOff            HAL_setGpioHigh
 
 
 //! \brief Defines the function to turn LEDs on
 //!
-#define HAL_turnLedOn             HAL_setGpioHigh
+#define HAL_turnLedOn             HAL_setGpioLow
 
 
 //! \brief Defines the function to turn LEDs on
@@ -640,37 +640,37 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
   {
     // convert current A
     // sample the first sample twice due to errata sprz342f, ignore the first sample
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_8);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_9);
     value = _IQ12mpy(value,current_sf);
     pAdcData->I.value[0] = value;
 
     // convert current B
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_9);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_10);
     value = _IQ12mpy(value,current_sf);
     pAdcData->I.value[1] = value;
 
     // convert current C
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_10);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_11);
     value = _IQ12mpy(value,current_sf);
     pAdcData->I.value[2] = value;
 
     // convert voltage A
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_11);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_12);
     value = _IQ12mpy(value,voltage_sf);
     pAdcData->V.value[0] = value;
 
     // convert voltage B
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_12);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_13);
     value = _IQ12mpy(value,voltage_sf);
     pAdcData->V.value[1] = value;
 
     // convert voltage C
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_13);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_14);
     value = _IQ12mpy(value,voltage_sf);
     pAdcData->V.value[2] = value;
 
     // read the dcBus voltage value
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_14);
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_15);
     value = _IQ12mpy(value,voltage_sf);
     pAdcData->dcBus = value;
   }
@@ -1102,7 +1102,6 @@ extern void HAL_setupSpiA(HAL_Handle handle);
 //! \param[in] handle  The hardware abstraction layer (HAL) handle
 extern void HAL_setupSpiB(HAL_Handle handle);
 
-
 //! \brief     Sets up the timers
 //! \param[in] handle          The hardware abstraction layer (HAL) handle
 //! \param[in] systemFreq_MHz  The system frequency, MHz
@@ -1437,6 +1436,33 @@ void HAL_readDrvData(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars);
 //! \param[in] Spi_8305_Vars  SPI variables
 void HAL_setupDrvSpi(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars);
 
+//! \brief Reads the Potentiometer
+//! \param[in] handle The hardware abstraction layer (HAL) handle
+//! \return The potentiometer value from _IQ(-1.0) to _IQ(1.0)
+static inline _iq HAL_readPotentiometerData(HAL_Handle handle)
+{
+    HAL_Obj *obj = (HAL_Obj *)handle;
+    _iq value;
+    // convert potentiometer from IQ12 to IQ24.
+    value = _IQ12toIQ((_iq)ADC_readResult(obj->adcHandle, ADC_ResultNumber_0));
+    return(value);
+} // end of HAL_readPotentiometerData() function
+
+//! \brief Reads the specified ADC result
+//! \param[in] handle The hardware abstraction layer (HAL) handle
+//! \param[in] result_num The number of the result register (corresponds to the SOC number)
+//! \return The ADC value from _IQ(-1.0) to _IQ(1.0)
+static inline _iq HAL_readAdcResult(HAL_Handle handle, ADC_ResultNumber_e result_num)
+{
+    HAL_Obj *obj = (HAL_Obj *)handle;
+    _iq value;
+
+    // convert potentiometer from IQ12 to IQ24 (or whatever is default).
+    value = _IQ12toIQ((_iq)ADC_readResult(obj->adcHandle, result_num));
+
+    return(value);
+} // end of HAL_readAdcResult() function
+
 
 #ifdef __cplusplus
 }
