diff --git a/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c b/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c
index 9b1d5fd..cbdb9a6 100644
--- a/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c
+++ b/sw/drivers/drvic/drv8305/src/32b/f28x/f2806x/drv8305.c
@@ -101,0 +102,4 @@ void DRV8305_enable(DRV8305_Handle handle)
+          // ***** JF edit starts
+          //GPIO_setHigh(obj->gpioHandle,GPIO_Number_34);
+          // ***** JF edit ends
+
@@ -1108,0 +1113,8 @@ uint16_t DRV8305_readSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr)
+  // ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
@@ -1124,0 +1137,8 @@ uint16_t DRV8305_readSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr)
+  // ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
@@ -1137,0 +1158,8 @@ void DRV8305_writeSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr,cons
+// ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setLow(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
@@ -1148,0 +1177,8 @@ void DRV8305_writeSpi(DRV8305_Handle handle,const DRV8305_Address_e regAddr,cons
+  // ***** JF edit starts
+  if(obj->gpioNumber == GPIO_Number_50){ // CH A
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_19);
+  } else { // CH B
+      GPIO_setHigh(obj->gpioHandle,GPIO_Number_29);
+  }
+  // ***** JF edit ends
+
diff --git a/sw/ide/ccs/cmd/f2806x/f28069M_ram_lnk.cmd b/sw/ide/ccs/cmd/f2806x/F28069M_ram_lnk.cmd
similarity index 100%
rename from sw/ide/ccs/cmd/f2806x/f28069M_ram_lnk.cmd
rename to sw/ide/ccs/cmd/f2806x/F28069M_ram_lnk.cmd
diff --git a/sw/modules/enc/src/32b/enc.c b/sw/modules/enc/src/32b/enc.c
index 10a45ea..cb8b6dc 100644
--- a/sw/modules/enc/src/32b/enc.c
+++ b/sw/modules/enc/src/32b/enc.c
@@ -68 +68 @@ ENC_Handle ENC_init(void *pMemory,const size_t numBytes)
-void ENC_setup(ENC_Handle encHandle, const int16_t sample_period, const uint16_t num_pole_pairs, const uint16_t num_enc_slots, const uint32_t enc_zero_offset, const float_t full_scale_freq, const float_t speed_update_freq, const float_t speed_cutoff)
+void ENC_setup(ENC_Handle encHandle, const int16_t sample_period, const uint16_t num_pole_pairs, const uint32_t num_enc_slots, const uint32_t enc_zero_offset, const float_t full_scale_freq, const float_t speed_update_freq, const float_t speed_cutoff)
diff --git a/sw/modules/enc/src/32b/enc.h b/sw/modules/enc/src/32b/enc.h
index 284ae02..a6b7919 100644
--- a/sw/modules/enc/src/32b/enc.h
+++ b/sw/modules/enc/src/32b/enc.h
@@ -36,2 +36,2 @@
-//! \brief  Contains the public interface to the 
-//!         encoder module routines 
+//! \brief  Contains the public interface to the
+//!         encoder module routines
@@ -91 +91 @@ typedef struct _ENC_Obj_
-  uint16_t num_enc_slots;		//!< number of encoder slots
+  uint32_t num_enc_slots;		//!< number of encoder slots
@@ -233,2 +233,2 @@ extern void ENC_setup(ENC_Handle encHandle, const int16_t sample_period,
-                      const uint16_t num_pole_pairs, const uint16_t num_enc_slots, 
-                      const uint32_t enc_zero_offset, const float_t full_scale_freq, 
+                      const uint16_t num_pole_pairs, const uint32_t num_enc_slots,
+                      const uint32_t enc_zero_offset, const float_t full_scale_freq,
diff --git a/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c b/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c
index 1f50131..4ebfa8b 100644
--- a/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c
+++ b/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.c
@@ -33 +33 @@
-//! \brief Contains the various functions related to the HAL object (everything outside the CTRL system) 
+//! \brief Contains the various functions related to the HAL object (everything outside the CTRL system)
@@ -82 +82 @@ void HAL_cal(HAL_Handle handle)
-  // This boot ROM automatically calls this function to calibrate the interal 
+  // This boot ROM automatically calls this function to calibrate the interal
@@ -841 +841,5 @@ void HAL_setParamsMtr(HAL_Handle_mtr handleMtr,HAL_Handle handle,const USER_Para
-    DRV8305_setSpiHandle(objMtr->drv8305Handle,obj->spiBHandle);
+
+    // ***** JF edit starts
+    //DRV8305_setSpiHandle(objMtr->drv8305Handle,obj->spiBHandle);
+    DRV8305_setSpiHandle(objMtr->drv8305Handle,obj->spiAHandle);
+    // ***** JF edit ends
@@ -891 +895 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // set the ADC voltage reference source to internal 
+  // set the ADC voltage reference source to internal
@@ -926 +930 @@ void HAL_setupAdcs(HAL_Handle handle)
-  ADC_setIntSrc(obj->adcHandle,ADC_IntNumber_2,ADC_IntSrc_EOC14);
+  ADC_setIntSrc(obj->adcHandle,ADC_IntNumber_2,ADC_IntSrc_EOC15);
@@ -930,0 +935,25 @@ void HAL_setupAdcs(HAL_Handle handle)
+
+  // About ADC Initial Conversion bug
+  // --------------------------------
+  //
+  // From the Silicon Errata of the TMS320F28069 (SPRZ342K):
+  // "When the ADC conversions are initiated by any source of trigger in either
+  // sequential or simultaneous sampling mode, the first sample may not be the
+  // correct conversion result."
+  //
+  // The proposed workaround is to sample the first channel twice and only use
+  // the second result (i.e. never look at the result of the first conversion).
+  // This, however, wastes one of the SOC numbers, i.e. using all 16 ADC
+  // channels gets difficult.
+  // The expected error for the first sample, according to the errata, is <= 4
+  // LSB (least significant bits).  On the range of -1 to +1, this corresponds
+  // to an error of <= 0.002.
+  // For many possible applications of the remaining ADCs A6 and B6 (e.g.
+  // hardware slider, temparature sensor, ...) this error is small enough to be
+  // tolerable.  Therefore we simply use the first (erroneous) conversion of the
+  // two sequences for these inputs and use them, despite being not 100%
+  // correct.  By doing so, we avoid errors in the critical phase current
+  // conversions while still being able to use all 16 channels without ugly
+  // hacks.
+
+
@@ -932,2 +961,5 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // EXT IA-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_0,ADC_SocChanNumber_A0);
+
+  // Sensor on ADCINA6 (e.g. potentiometer).
+  // Note: this is affected by ADC Initial Conversion bug (SPRZ342) which leads
+  // to an error of typically <= 0.002
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_0,ADC_SocChanNumber_A6);
@@ -938 +969,0 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // Duplicate conversion due to ADC Initial Conversion bug (SPRZ342)
@@ -975,2 +1006,5 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // EXT IA-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_8,ADC_SocChanNumber_A3);
+
+  // Sensor on ADCINB6 (e.g. potentiometer).
+  // Note: this is affected by ADC Initial Conversion bug (SPRZ342) which leads
+  // to an error of typically <= 0.002
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_8,ADC_SocChanNumber_B6);
@@ -980,2 +1014,2 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // EXT IB-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_9,ADC_SocChanNumber_B3);
+  // EXT IA-FB
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_9,ADC_SocChanNumber_A3);
@@ -985,2 +1019,2 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // EXT IC-FB
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_10,ADC_SocChanNumber_A4);
+  // EXT IB-FB
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_10,ADC_SocChanNumber_B3);
@@ -990,2 +1024,2 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // ADC-Vhb1
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_11,ADC_SocChanNumber_B7);
+  // EXT IC-FB
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_11,ADC_SocChanNumber_A4);
@@ -995,2 +1029,2 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // ADC-Vhb2
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_12,ADC_SocChanNumber_B4);
+  // ADC-Vhb1
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_12,ADC_SocChanNumber_B7);
@@ -1000,2 +1034,2 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // ADC-Vhb3
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_13,ADC_SocChanNumber_A5);
+  // ADC-Vhb2
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_13,ADC_SocChanNumber_B4);
@@ -1005,2 +1039,2 @@ void HAL_setupAdcs(HAL_Handle handle)
-  // VDCBUS
-  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_14,ADC_SocChanNumber_B5);
+  // ADC-Vhb3
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_14,ADC_SocChanNumber_A5);
@@ -1008,0 +1043,5 @@ void HAL_setupAdcs(HAL_Handle handle)
+
+  // VDCBUS
+  ADC_setSocChanNumber(obj->adcHandle,ADC_SocNumber_15,ADC_SocChanNumber_B5);
+  ADC_setSocTrigSrc(obj->adcHandle,ADC_SocNumber_15,ADC_SocTrigSrc_EPWM4_ADCSOCA);
+  ADC_setSocSampleDelay(obj->adcHandle,ADC_SocNumber_15,ADC_SocSampleDelay_9_cycles);
@@ -1011,0 +1051 @@ void HAL_setupAdcs(HAL_Handle handle)
+
@@ -1072 +1112 @@ void HAL_setupGate(HAL_Handle_mtr handleMtr,SPI_Handle handleSpi,GPIO_Handle han
-  
+
@@ -1123,3 +1163,6 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_12,GPIO_12_Mode_GeneralPurpose);
-  GPIO_setLow(obj->gpioHandle,GPIO_Number_12);
-  GPIO_setDirection(obj->gpioHandle,GPIO_Number_12,GPIO_Direction_Output);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_12,GPIO_12_Mode_GeneralPurpose);
+//  GPIO_setLow(obj->gpioHandle,GPIO_Number_12);
+//  GPIO_setDirection(obj->gpioHandle,GPIO_Number_12,GPIO_Direction_Output);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_12,GPIO_12_Mode_SPISIMOB);
+  // ***** JF edit ends
@@ -1128 +1171,4 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_13,GPIO_13_Mode_GeneralPurpose);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_13,GPIO_13_Mode_GeneralPurpose);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_13,GPIO_13_Mode_SPISOMIB);
+  // ***** JF edit ends
@@ -1131 +1177,4 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_14,GPIO_14_Mode_SPICLKB);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_14,GPIO_14_Mode_SPICLKB);
+    GPIO_setMode(obj->gpioHandle,GPIO_Number_14,GPIO_14_Mode_GeneralPurpose);
+  // ***** JF edit ends
@@ -1149,2 +1198,7 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_19,GPIO_19_Mode_SPISTEA_NOT);
-  
+  // ***** JF edit starts
+  //  GPIO_setMode(obj->gpioHandle,GPIO_Number_19,GPIO_19_Mode_SPISTEA_NOT);
+  GPIO_setMode(obj->gpioHandle, GPIO_Number_19, GPIO_19_Mode_GeneralPurpose);
+  GPIO_setHigh(obj->gpioHandle, GPIO_Number_19);
+  GPIO_setDirection(obj->gpioHandle, GPIO_Number_19, GPIO_Direction_Output);
+  // ***** JF edit ends
+
@@ -1181,0 +1236,8 @@ void HAL_setupGpios(HAL_Handle handle)
+  // ***** JF edit starts
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_22,GPIO_22_Mode_GeneralPurpose); // redundant, but okay
+  GPIO_setLow(obj->gpioHandle,GPIO_Number_22);
+  GPIO_setDirection(obj->gpioHandle,GPIO_Number_22,GPIO_Direction_Input);
+  GPIO_setExtInt(obj->gpioHandle, GPIO_Number_22, CPU_ExtIntNumber_3);
+
+  // ***** JF edit ends
+
@@ -1183 +1245,4 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_24,GPIO_24_Mode_SPISIMOB);
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_24,GPIO_24_Mode_SPISIMOB);
+    GPIO_setMode(obj->gpioHandle,GPIO_Number_24,GPIO_24_Mode_GeneralPurpose);
+  // ***** JF edit ends
@@ -1186 +1251,11 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_25,GPIO_25_Mode_SPISOMIB);
+  // **** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_25,GPIO_25_Mode_SPISOMIB);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_25,GPIO_25_Mode_GeneralPurpose);
+  // **** JF edit ends
+
+  // GPIO -- Input for button
+  // **** JF edit starts
+//  GPIO_setMode(obj->gpioHandle, GPIO_Number_26, GPIO_26_Mode_GeneralPurpose);
+//  GPIO_setHigh(obj->gpioHandle, GPIO_Number_26);
+//  GPIO_setDirection(obj->gpioHandle, GPIO_Number_26, GPIO_Direction_Input);
+  GPIO_setMode(obj->gpioHandle,GPIO_Number_26,GPIO_26_Mode_SPICLKB);
@@ -1188,2 +1262,0 @@ void HAL_setupGpios(HAL_Handle handle)
-  // GPIO
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_26,GPIO_26_Mode_GeneralPurpose);
@@ -1191,0 +1265,2 @@ void HAL_setupGpios(HAL_Handle handle)
+
+  // ***** JF edit starts
@@ -1192,0 +1268,6 @@ void HAL_setupGpios(HAL_Handle handle)
+  GPIO_setDirection(obj->gpioHandle, GPIO_Number_27, GPIO_Direction_Input); // BTW, this is necessary!
+
+  GPIO_setMode(obj->gpioHandle, GPIO_Number_29, GPIO_29_Mode_GeneralPurpose);
+  GPIO_setHigh(obj->gpioHandle, GPIO_Number_29);
+  GPIO_setDirection(obj->gpioHandle, GPIO_Number_29, GPIO_Direction_Output);
+  // ***** JF edit ends
@@ -1198 +1279,4 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_29,GPIO_29_Mode_TZ3_NOT);
+
+  // ***** JF edit starts
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_29,GPIO_29_Mode_TZ3_NOT);
+  // ***** JF edit ends
@@ -1210 +1294,8 @@ void HAL_setupGpios(HAL_Handle handle)
-  GPIO_setMode(obj->gpioHandle,GPIO_Number_33,GPIO_33_Mode_SCLA);
+  // ***** JF edit
+
+//  GPIO_setMode(obj->gpioHandle,GPIO_Number_33,GPIO_33_Mode_SCLA);
+    GPIO_setMode(obj->gpioHandle,GPIO_Number_33,GPIO_33_Mode_GeneralPurpose);
+    GPIO_setLow(obj->gpioHandle,GPIO_Number_33);
+    GPIO_setDirection(obj->gpioHandle,GPIO_Number_33,GPIO_Direction_Output);
+
+  // ***** JF edit ends
@@ -1265 +1356 @@ void HAL_setupGpios(HAL_Handle handle)
-  
+
@@ -1268 +1359 @@ void HAL_setupGpios(HAL_Handle handle)
-  
+
@@ -1365 +1456 @@ void HAL_setupPeripheralClks(HAL_Handle handle)
-  
+
@@ -1517 +1608 @@ void HAL_setupPwms(HAL_Handle_mtr handleMtr,HAL_Handle handle,const USER_Params
-  // since the PWM is configured as an up/down counter, the period register is set to one-half 
+  // since the PWM is configured as an up/down counter, the period register is set to one-half
@@ -1613,2 +1704,7 @@ void HAL_setupSpiB(HAL_Handle handle)
-  SPI_setMode(obj->spiBHandle,SPI_Mode_Master);
-  SPI_setClkPolarity(obj->spiBHandle,SPI_ClkPolarity_OutputRisingEdge_InputFallingEdge);
+  SPI_setMode(obj->spiBHandle,SPI_Mode_Slave); // this is default, but we shall set it anyway
+  SPI_setClkPolarity(obj->spiBHandle,SPI_ClkPolarity_OutputFallingEdge_InputRisingEdge);
+  SPI_setCharLength(obj->spiBHandle,SPI_CharLength_16_Bits);
+
+  SPI_enableRxFifo(obj->spiBHandle);
+  SPI_enableInt(obj->spiBHandle);
+
@@ -1618,4 +1714,11 @@ void HAL_setupSpiB(HAL_Handle handle)
-  SPI_setTxDelay(obj->spiBHandle,0x0018);
-  SPI_setBaudRate(obj->spiBHandle,(SPI_BaudRate_e)(0x000d));
-  SPI_setCharLength(obj->spiBHandle,SPI_CharLength_16_Bits);
-  SPI_setSuspend(obj->spiBHandle,SPI_TxSuspend_free);
+  SPI_setTxDelay(obj->spiBHandle,0x00AF);
+
+  (obj->spiBHandle)->SPIFFTX |= (1<<15);
+
+
+  SPI_enableRxFifoInt(obj->spiBHandle); // SPIINT/SPIRXINT: common interrupt for FIFO receive, receive error, and FIFO overflow
+  (obj->spiBHandle)->SPIFFRX &= (~0x001F); // clear bits 4-0 (RXFFIL4-0)
+
+  (obj->spiBHandle)->SPIFFRX |= 2;          // set to generate RXFFINT when the FIFO has N words
+
+  //SPI_setSuspend(obj->spiBHandle,SPI_TxSuspend_free);
@@ -1663 +1766 @@ void HAL_setupPwmDacs(HAL_Handle handle)
-      // Initialize the Action-Qualifier Output A Register (AQCTLA) 
+      // Initialize the Action-Qualifier Output A Register (AQCTLA)
@@ -1669 +1772 @@ void HAL_setupPwmDacs(HAL_Handle handle)
-      // Initialize the Dead-Band Control Register (DBCTL) 
+      // Initialize the Dead-Band Control Register (DBCTL)
@@ -1686 +1789 @@ void HAL_setupPwmDacs(HAL_Handle handle)
-  // since the PWM is configured as an up/down counter, the period register is set to one-half 
+  // since the PWM is configured as an up/down counter, the period register is set to one-half
@@ -1721 +1824 @@ void HAL_writeDrvData(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars)
-  
+
@@ -1731 +1834 @@ void HAL_readDrvData(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars)
-  
+
diff --git a/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h b/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h
index c463a3b..8e131dd 100644
--- a/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h
+++ b/sw/modules/hal/boards/boostxldrv8305_revA/f28x/f2806x/src/hal_2mtr.h
@@ -123 +123 @@ extern "C" {
-#define HAL_turnLedOff            HAL_setGpioLow
+#define HAL_turnLedOff            HAL_setGpioHigh
@@ -128 +128 @@ extern "C" {
-#define HAL_turnLedOn             HAL_setGpioHigh
+#define HAL_turnLedOn             HAL_setGpioLow
@@ -643,5 +642,0 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_8);
-    value = _IQ12mpy(value,current_sf);
-    pAdcData->I.value[0] = value;
-
-    // convert current B
@@ -650 +645 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    pAdcData->I.value[1] = value;
+    pAdcData->I.value[0] = value;
@@ -652 +647 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    // convert current C
+    // convert current B
@@ -655 +650 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    pAdcData->I.value[2] = value;
+    pAdcData->I.value[1] = value;
@@ -657 +652 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    // convert voltage A
+    // convert current C
@@ -659,2 +654,2 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    value = _IQ12mpy(value,voltage_sf);
-    pAdcData->V.value[0] = value;
+    value = _IQ12mpy(value,current_sf);
+    pAdcData->I.value[2] = value;
@@ -662 +657 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    // convert voltage B
+    // convert voltage A
@@ -665 +660 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    pAdcData->V.value[1] = value;
+    pAdcData->V.value[0] = value;
@@ -667 +662 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    // convert voltage C
+    // convert voltage B
@@ -670 +665 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    pAdcData->V.value[2] = value;
+    pAdcData->V.value[1] = value;
@@ -672 +667 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
-    // read the dcBus voltage value
+    // convert voltage C
@@ -674,0 +670,5 @@ static inline void HAL_readAdcDataWithOffsets(HAL_Handle handle,HAL_Handle_mtr h
+    pAdcData->V.value[2] = value;
+
+    // read the dcBus voltage value
+    value = (_iq)ADC_readResult(obj->adcHandle,ADC_ResultNumber_15);
+    value = _IQ12mpy(value,voltage_sf);
@@ -1105 +1104,0 @@ extern void HAL_setupSpiB(HAL_Handle handle);
-
@@ -1439,0 +1439,27 @@ void HAL_setupDrvSpi(HAL_Handle_mtr handle, DRV_SPI_8305_Vars_t *Spi_8305_Vars);
+//! \brief Reads the Potentiometer
+//! \param[in] handle The hardware abstraction layer (HAL) handle
+//! \return The potentiometer value from _IQ(-1.0) to _IQ(1.0)
+static inline _iq HAL_readPotentiometerData(HAL_Handle handle)
+{
+    HAL_Obj *obj = (HAL_Obj *)handle;
+    _iq value;
+    // convert potentiometer from IQ12 to IQ24.
+    value = _IQ12toIQ((_iq)ADC_readResult(obj->adcHandle, ADC_ResultNumber_0));
+    return(value);
+} // end of HAL_readPotentiometerData() function
+
+//! \brief Reads the specified ADC result
+//! \param[in] handle The hardware abstraction layer (HAL) handle
+//! \param[in] result_num The number of the result register (corresponds to the SOC number)
+//! \return The ADC value from _IQ(-1.0) to _IQ(1.0)
+static inline _iq HAL_readAdcResult(HAL_Handle handle, ADC_ResultNumber_e result_num)
+{
+    HAL_Obj *obj = (HAL_Obj *)handle;
+    _iq value;
+
+    // convert potentiometer from IQ12 to IQ24 (or whatever is default).
+    value = _IQ12toIQ((_iq)ADC_readResult(obj->adcHandle, result_num));
+
+    return(value);
+} // end of HAL_readAdcResult() function
+
